name: Static Code Analysis

on:
  pull_request:
    branches:
      - main

jobs:
  static_code_analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Cppcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Octokit
        run: |
            npm install @octokit/rest
            npm install node-fetch

      - name: Run Cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml --xml-version=2 . 2> cppcheck_report.xml

      - name: Comment on Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { Octokit } = require('@octokit/rest');
            const fetch = require('node-fetch');
            // Read the Cppcheck report
            const report = fs.readFileSync('cppcheck_report.xml', 'utf8');

            // Create an Octokit instance
            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN
            });

            // Create a check run
            const check = await octokit.checks.create({
              owner: process.env.GITHUB_REPOSITORY_OWNER,
              repo: process.env.GITHUB_REPOSITORY,
              name: 'Cppcheck',
              head_sha: process.env.GITHUB_SHA,
              status: 'completed',
              conclusion: 'neutral',
              output: {
                title: 'Static Code Analysis (Cppcheck)',
                summary: 'Static code analysis report generated by Cppcheck',
                text: report,
                annotations: []
              }
            });

            // Parse the Cppcheck report and add annotations to the check run
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(report, 'text/xml');
            const errors = xmlDoc.getElementsByTagName('error');

            for (let i = 0; i < errors.length; i++) {
              const error = errors[i];
              const file = error.getAttribute('file');
              const line = error.getAttribute('line');
              const message = error.getAttribute('msg');

              await octokit.issues.createComment({
                owner: process.env.GITHUB_REPOSITORY_OWNER,
                repo: process.env.GITHUB_REPOSITORY,
                issue_number: process.env.GITHUB_PULL_REQUEST_NUMBER,
                body: `Cppcheck found an issue in ${file} at line ${line}: ${message}`
              });

              check.output.annotations.push({
                path: file,
                start_line: parseInt(line),
                end_line: parseInt(line),
                annotation_level: 'failure',
                message: message
              });
            }

            // Update the check run with the annotations
            await octokit.checks.update({
              owner: process.env.GITHUB_REPOSITORY_OWNER,
              repo: process.env.GITHUB_REPOSITORY,
              check_run_id: check.data.id,
              status: 'completed',
              conclusion: 'neutral',
              output: check.output
            });